<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<language name="Odin" version="1" kateversion="5.0" section="Sources" extensions="*.odin" mimetype="text/odin" priority="5">
<highlighting>
    <list name="keywords">
        <item>import</item>
        <item>foreign</item>
        <item>package</item>
        <item>if</item>
        <item>else</item>
        <item>when</item>
        <item>for</item>
        <item>in</item>
        <item>not_in</item>
        <item>defer</item>
        <item>switch</item>
        <item>return</item>
        <item>const</item>
        <item>do</item>
        <item>where</item>
        <item>fallthrough</item>
        <item>break</item>
        <item>continue</item>
        <item>case</item>
        <item>using</item>
        <item>asm</item>
        <item>or_return</item>
        <item>or_else</item>
        <item>distinct</item>
    </list>
    <list name="types">
        <item>struct</item>
        <item>proc</item>
        <item>enum</item>
        <item>union</item>
        <item>map</item>
        <item>bit_set</item>
        <item>dynamic</item>

        <item>byte</item>
        <item>int</item>
        <item>uint</item>
        <item>uintptr</item>


        <item>u8</item>
        <item>u16</item>
        <item>u32</item>
        <item>u64</item>
        <item>u128</item>

        <item>i8</item>
        <item>i16</item>
        <item>i32</item>
        <item>i64</item>
        <item>i128</item>

        <item>u8le</item>
        <item>u16le</item>
        <item>u32le</item>
        <item>u64le</item>
        <item>u128le</item>
        <item>i8le</item>
        <item>i16le</item>
        <item>i32le</item>
        <item>i64le</item>
        <item>i128le</item>

        <item>u8be</item>
        <item>u16be</item>
        <item>u32be</item>
        <item>u64be</item>
        <item>u128be</item>
        <item>i8be</item>
        <item>i16be</item>
        <item>i32be</item>
        <item>i64be</item>
        <item>i128be</item>

        <item>f16</item>
        <item>f32</item>
        <item>f64</item>

        <item>f16le</item>
        <item>f32le</item>
        <item>f64le</item>
        <item>f128le</item>

        <item>f16be</item>
        <item>f32be</item>
        <item>f64be</item>
        <item>f128le</item>

        <item>complex32</item>
        <item>complex64</item>
        <item>complex128</item>

        <item>quaternion64</item>
        <item>quaternion128</item>
        <item>quaternion256</item>

        <item>bool</item>
        <item>b8</item>
        <item>b16</item>
        <item>b32</item>
        <item>b64</item>

        <item>string</item>
        <item>cstring</item>
        <item>rune</item>

        <item>rawptr</item>

        <item>any</item>
        <item>typeid</item>
    </list>
    <list name="constants">
        <item>nil</item>
        <item>true</item>
        <item>false</item>
        <item>---</item>
    </list>
	<contexts>
        <context attribute="Normal Text" lineEndContext="#stay" name="Normal">
            <DetectSpaces/>

            <keyword String="keywords"  attribute="Keyword"  context="#stay"/>
            <keyword String="types"     attribute="Type"     context="#stay"/>
            <keyword String="constants" attribute="Constant" context="#stay"/>

            <!-- Comments -->
            <Detect2Chars char="/" char1="/" attribute="Comment"      context="Comment"/>
            <Detect2Chars char="/" char1="*" attribute="MultiComment" context="MultiComment"/>

            <!-- Bin/Oct/Hex literals -->
            <RegExpr String="\b0b[01]+\b"        attribute="Binary" context="#stay"/>
            <RegExpr String="\b0o[0-7]+\b"       attribute="Octal"  context="#stay"/>
            <RegExpr String="\b0x[0-9a-fA-F]+\b" attribute="Hex"    context="#stay"/>
            <RegExpr String="\b0b([01]*[^01][0-9a-zA-Z_]*)?\b"               attribute="Error" context="#stay"/>
            <RegExpr String="\b0o([0-7]*[^0-7][0-9a-zA-Z_]*)?\b"             attribute="Error" context="#stay"/>
            <RegExpr String="\b0o([0-9a-fA-F]*[^0-9a-fA-F][0-9a-zA-Z_]*)?\b" attribute="Error" context="#stay"/>

            <!-- Floats -->
            <RegExpr String="\b[0-9]+\.[0-9]+\b"                   attribute="Float" context="#stay"/>
            <RegExpr String="\b[0-9]+\.[0-9]+[eE][\+\-]?[0-9]+\b"  attribute="Float" context="#stay"/>
            <RegExpr String="\b[0-9]+[eE][\+\-]?[0-9]+\b"          attribute="Float" context="#stay"/>

            <!-- Imaginary number literal -->
            <RegExpr String="\b[0-9]+\.[0-9]+i\b"                  attribute="Imaginary" context="#stay"/>
            <RegExpr String="\b[0-9]+\.[0-9]+[eE][\+\-]?[0-9]+i\b" attribute="Imaginary" context="#stay"/>
            <RegExpr String="\b[0-9]+[eE][\+\-]?[0-9]+i\b"         attribute="Imaginary" context="#stay"/>
            <RegExpr String="\b[0-9]+i\b"                          attribute="Imaginary" context="#stay"/>


            <!-- Decimal literal -->
            <RegExpr String="\b[0-9]+\b" attribute="Decimal" context="#stay"/>

            <!-- Number literal error -->
            <RegExpr String="\b[0-9]([eE][\+\-]?|[0-9a-zA-Z_\.])+\b" attribute="Error" context="#stay"/>

            <!-- Character literal -->
            <RegExpr String="'(\\([abefnrtv\\'&quot;]|[0-7]{2}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{6})|[^'\\])'" attribute="Character" context="#stay" />
            <RegExpr String="'[^']+'"                                                                                     attribute="Error"     context="#stay" />

            <!-- Region identifiers -->
            <DetectChar char="{" attribute="Symbol" context="#stay" beginRegion="Brace"/>
            <DetectChar char="}" attribute="Symbol" context="#stay" endRegion="Brace"/>

            <!-- String literals -->
            <DetectChar char="&quot;" attribute="String"    context="String" />
            <DetectChar char="`"      attribute="RawString" context="RawString" />

            <RegExpr String="\b[_a-zA-Z][_a-zA-Z0-9]*\b" attribute="Normal Text"       context="#stay"/>
            <RegExpr String="#[_a-zA-Z][_a-zA-Z0-9]*\b"  attribute="Compiler Function" context="#stay"/>
        </context>

        <context attribute="String" lineEndContext="#stay" name="String">
            <RegExpr String="\\([abefnrtv\\'&quot;]|[0-7]{2}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{6})" attribute="Escape" context="#stay"/>
            <DetectChar char="&quot;" attribute="String" context="#pop"/>
        </context>

        <context attribute="RawString" lineEndContext="#stay" name="RawString">
            <DetectChar char="`" attribute="RawString" context="#pop"/>
        </context>

        <context attribute="Comment" lineEndContext="#pop" name="Comment">
            <IncludeRules context="##Alerts"/>
        </context>

        <context attribute="MultiComment" lineEndContext="#stay" name="MultiComment">
            <IncludeRules context="##Alerts"/>
            <Detect2Chars char="/" char1="*" attribute="MultiComment" context="MultiComment"/>
            <Detect2Chars char="*" char1="/" attribute="MultiComment" context="#pop"/>
        </context>
    </contexts>
    <itemDatas>
        <itemData name="Normal Text"       defStyleNum="dsNormal"/>
        <itemData name="Keyword"           defStyleNum="dsKeyword"  spellChecking="0"/>
        <itemData name="Type"              defStyleNum="dsDataType" spellChecking="0"/>
        <itemData name="Compiler Function" defStyleNum="dsBuiltIn"  spellChecking="0"/>
        <itemData name="Constant"          defStyleNum="dsConstant" spellChecking="0"/>
        <itemData name="Comment"           defStyleNum="dsComment"/>
        <itemData name="MultiComment"      defStyleNum="dsComment"/>
        <itemData name="Binary"            defStyleNum="dsBaseN"/>
        <itemData name="Octal"             defStyleNum="dsBaseN"/>
        <itemData name="Decimal"           defStyleNum="dsDecVal"/>
        <itemData name="Hex"               defStyleNum="dsBaseN"/>
        <itemData name="Float"             defStyleNum="dsFloat"/>
        <itemData name="Imaginary"         defStyleNum="dsFloat"/>
        <itemData name="String"            defStyleNum="dsString"/>
        <itemData name="RawString"         defStyleNum="dsString"/>
        <itemData name="Escape"            defStyleNum="dsSpecialChar"/>
        <itemData name="Character"         defStyleNum="dsChar"/>
        <itemData name="Symbol"            defStyleNum="dsOperator"/>
        <itemData name="Error"             defStyleNum="dsError"/>
    </itemDatas>
</highlighting>
<general>
    <comments>
        <comment name="singleLine" start="//" />
        <comment name="multiLine" start="/*" end="*/" region="CommentFolding"/>
    </comments>
    <keywords casesensitive="1" />
</general>
</language>
